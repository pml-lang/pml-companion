// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service PML_to_HTML_Converter

    att version string = "2.2.0"
    att version_date local_date = local_date.parse_or_throw ( "2021-12-14" )

    function try_convert_PML_file_path_string -> file or anticipated_error
        in absolute_or_relative_PML_file_path string

        const PML_file_path = absolute_or_relative_file_path_parser.create.try_parse (
            i_absolute_or_relative_PML_file_path ) on_error: return_error

        return try_convert ( PML_to_HTML_config.create_for_PML_file_path ( PML_file_path ) )
    .

    function try_convert ( config PML_to_HTML_config ) -> file or anticipated_error

        const output_directory = i_config.output_directory_path.to_directory
        output_directory.try_create_if_not_exists on_error:return_error

        const resources_directory = i_config.resources_directory_path?.to_directory

        se_PML_to_HTML_checker.check_parameters ( resources_directory, output_directory ) on_error:return_error

        se_PML_formal_node_registry.register_user_defined_nodes ( i_config ) on_error:return_error

        const error = try_create_HTML_file ( i_config )
        if error is not null then
            const first_error = i_config.error_handler.first_error
            assert first_error is not null
            se_editor.open_editor_for_error ( error = first_error, i_config )
            return error
        .

        try_copy_CSS_files ( output_directory ) on_error:return_error

        try_copy_resources ( resources_directory, output_directory ) on_error:return_error

        // se_desktop_utilities.open_file_in_default_browser ( file = HTML_file ) on_error:return_error
        /// TD
            if i_config.open_HTML_file then
                se_desktop_utilities.open_file_in_default_browser ( file = HTML_file ) on_error:return_error
            .
        .///

        OS.out.write_line ( """File {{i_config.HTML_output_file.to_string}} has been created.""" )

        return i_config.HTML_output_file
    .


    functions access:private

///
        function try_create_HTML_file ( config PML_to_HTML_config ) -> anticipated_error or null

            const display_times = no // TD make parameter

            const timer = simple_timer.create

            timer.start
            const document_AST = PML_parser.create.try_parse (
                PML_code_supplier = i_config.PML_input,
                tokenizer_config = PML_tokenizer_config.create_from_PML_to_HTML_config ( i_config ) ) \
                on_error:return_error
            const parser_time = timer.stop_milliseconds
            if display_times then
                %we<parser_time>
            .

            timer.start
            const document_node = PML_analyzer.create.try_analyze ( document_AST ) on_error:return_error
            const creator_time = timer.stop_milliseconds
            if display_times then
                %we<creator_time>
            .

            i_config.document_TOC_position = document_node.TOC_position
            i_config.document_source_code_highlighter = document_node.source_code_highlighter

            timer.start
            se_PML_HTML_page_writer.write_page ( document_node, config ) on_error:return_error
            if display_times then
                const writer_time = timer.stop_milliseconds
                %we<writer_time>

                const total_time = parser_time + creator_time + writer_time
                %we<total_time>
            .

            return null
        .
.///
        function try_create_HTML_file ( config PML_to_HTML_config ) -> anticipated_error or null

            const pXML_root_node = se_pXML_parser.try_parse ( i_config ) on_error:return_error

            const error_handler = i_config.error_handler
            const document_node = PML_tree_creator.create.try_create_tree (
                root_node = pXML_root_node
                context = PML_tree_creator_context.create ( error_handler ) ) on_error:return_error
            if error_handler.first_error as first_non_canceling_error is not null then
                return first_non_canceling_error
            .

            i_config.document_TOC_position = document_node.TOC_position
            i_config.document_source_code_highlighter = document_node.source_code_highlighter

            se_PML_HTML_page_writer.write_page ( document_node, config ) on_error:return_error

            return null
        .


        function try_copy_CSS_files ( output_directory directory ) -> runtime_error or null

            const destination_directory = se_PML_default_values.output_CSS_directory ( output_directory )
            destination_directory.try_create_if_not_exists on_error:return_error

            se_file_copier.try_copy_file_to_directory (
                file = se_PML_default_values.CSS_file
                directory = destination_directory
                file_overwrite_policy = ty_file_copy_overwrite_policy.always_overwrite ) on_error:return_error

            return se_file_copier.try_copy_file_to_directory (
                file = se_PML_default_values.CSS_print_file
                directory = destination_directory
                file_overwrite_policy = ty_file_copy_overwrite_policy.always_overwrite )
        .

        function try_copy_resources -> runtime_error or null
            in resources_directory directory or null
            in output_directory directory

            if i_resources_directory is null then
                return null
            .

            if not i_resources_directory.exists then
                return directory_inexistent_error.create_for_directory ( i_resources_directory )
            .

            return se_file_copier.try_copy_directory_content (
                source = resources_directory
                destination = output_directory
                file_overwrite_policy = file_copy_overwrite_policy.always_overwrite
                include_child_directories = yes )
        .
    .
.
