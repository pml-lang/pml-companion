// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service user_defined_test_nodes

    function smiley_node -> user_defined_node

        const writer = user_defined_node_writer.create (
            script_code = "context.write ( ':-) 3' );" )

        return user_defined_node.create (
            tag_name = "smiley"
            is_inline_node = yes
            attributes = null
            writer )
            // writers = [writer] )
    .

    function colored_text_node -> user_defined_node

        const writer = user_defined_node_writer.create (
            script_code = """
                /*
                context.write ( 'colored text node' );
                fg = attributes.get ( "fg" );
                context.write ( "fg: " + fg );
                bg = attributes.get ( "bg" );
                context.write ( "bg: " + bg );

                fg2 = context.getAtt ( "fg" );
                context.write ( "fg2: " + fg2 );
                */

/*
                fg = attributes.get ( "fg" );
                bg = attributes.get ( "bg" );
                context.write ( '<span style="color: ' + fg + '; background-color: ' + bg + ';">' )
                context.writeInlineChildNodes();
                context.write ( '</span>' )
*/

                foregroundColor = attributes.get ( "fc" );
                backgroundColor = attributes.get ( "bc" );

                context.write ( '<span style="color: ' + foregroundColor + '; background-color: ' + backgroundColor + '; border: 1px solid ' + foregroundColor + '; padding:5px; border-radius: 3px;">' )
                context.writeInlineChildNodes();
                context.write ( '</span>' )
            """ )

        const attributes = any_type_formal_parameters_builder.create
            .add_string_parameter (
                ids = [# "fc"]
                default_value_supplier = { "orange" } )
            .add_string_or_null_parameter (
                ids = [# "bc"]
                default_value_supplier = null )
            .make_immutable

        return user_defined_node.create (
            tag_name = "colored_text"
            is_inline_node = yes
            attributes,
            writer )
            // writers = [writer] )
    .

    function add_test_node ( map mutable_map<key:string, value:user_defined_node>, node user_defined_node )

        map.add ( key = node.tag_name, value = node)
    .

    function create_test_nodes -> map<key:string, value:user_defined_node>

        const map = mutable_map<key:string, value:user_defined_node>.create

        add_test_node ( map, node = smiley_node )
        add_test_node ( map, node = colored_text_node )

        return map.make_immutable
    .
.
