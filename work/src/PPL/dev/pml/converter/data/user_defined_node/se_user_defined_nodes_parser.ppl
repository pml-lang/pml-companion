// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service user_defined_nodes_parser

    java_header
        import java.io.File;
        import java.util.ArrayList;
        import java.util.List;
        import java.util.Map;

        import org.ppl.core.basics.scalar.string.fa_string;
        import org.ppl.core.collections.java.se_Java_collection_converter;
    end java_header

    function parse_directory_paths -> map<key:string value:user_defined_node> or null
        in directory_paths list<absolute_or_relative_directory_path>
        in error_handler text_error_handler

        return parse_directories (
            directories = i_directory_paths
                .stream
                .map<directory> ( { path => se_absolute_or_relative_directory_path.to_directory ( path ) } )
                .to_non_null_list,
            error_handler )
    .

    function parse_directories -> map<key:string value:user_defined_node> or null
        in directories list<directory>
        in error_handler text_error_handler

        const result mutable_map<key:string value:user_defined_node> = mutable_map<key:string value:user_defined_node>.create

        java
            List<File> directories = se_Java_collection_converter.convertPPLToJavaList (
                i_directories, PPLdirectory -> PPLdirectory.getJavaFile() );

            Map<String,UserDefinedNode> UDNs = UserDefinedNodeParser.parseDirectories (
                directories, i_error_handler.getJavaTextErrorHandler() );
            if ( UDNs == null ) return null;

            UDNs.forEach ( (k,UDN) -> c_result.add (
                new fa_string ( UDN.name() ),
                fa_user_defined_node.createFromJava ( UDN ) ) );
        end java

        return result.make_immutable
    .
.
