// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

factory user_defined_node

    java_header
        import org.ppl.core.basics.scalar.yes_no.fa_yes_no;
        import org.ppl.ext.parameters.formal_parameter.map.fa_any_type_formal_parameters_builder;
        import org.ppl.ext.parameters.formal_parameter.map.ty_any_type_formal_parameters_builder;
    end java_header

    java
        public static ty_user_defined_node createFromJava ( UserDefinedNode UDN ) {

            ty_formal_parameters<?> attributes = null;
            if ( UDN.attributes() != null ) {
                ty_any_type_formal_parameters_builder parameters_builder = fa_any_type_formal_parameters_builder.create();
                for ( UserDefinedNodeAttribute attribute : UDN.attributes() ) {
                    parameters_builder.add_parameter ( se_user_defined_node.create_parameter (
                        new fa_string ( attribute.name() ),
                        attribute.defaultValue() == null ? null : new fa_string ( attribute.defaultValue() ) ) );
                }
                attributes = parameters_builder.make_immutable ( null );
            }

            ty_user_defined_node_writer writer = fa_user_defined_node_writer.create (
                new fa_string ( UDN.writers().get ( 0 ).script() ) );

            return create (
                new fa_string ( UDN.name() ),
                fa_yes_no.of ( UDN.isInlineNode() ),
                attributes,
                writer,
                se_user_defined_node.getDefault_documentation() );
        }
    end java

    function get_script_code

        return writer.script_code
///
        repeat for each writer in a_writers
            if writer.target_code_name.is_equal_to_ignore_case ( i_target_code_name ) and \
                writer.script_language.is_equal_to_ignore_case ( i_script_language ) then
                return writer.script_code
            .
        .

        throw """Writer for target code '{{i_target_code_name}}' and script language '{{i_script_language}}' not available."""
.///
    .

    function to_formal_node

        if a_is_inline_node then
            return PML_generic_inline_formal_node.create_for_user_defined_node ( this )
        else
            throw "not supported yet"
        .
    .

    creator create kind:in_all
.
