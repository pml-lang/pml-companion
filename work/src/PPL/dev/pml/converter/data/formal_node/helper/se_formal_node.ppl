// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service formal_node

    java_header
        import dev.pdml.core.data.formalNode.FormalNode;
        import dev.pdml.core.data.node.name.NodeName;
        import dev.pml.converter.data.formal_node.ty_PML_formal_node;
    end java_header

    java
        @SuppressWarnings ( "unchecked" )
        public static FormalNode createPMDLFormalNode ( ty_PML_formal_node<?> PML_formal_node ) {

            NodeName name = new NodeName ( PML_formal_node.standard_tag().getJavaString() );

            // TODO: 'FormalParameters<T> formalAttributes' should also be created from i_PML_formal_node

            NodeName defaultAttributeName = null;
            if ( PML_formal_node.getDefault_attribute_id() != null ) {
                defaultAttributeName = new NodeName ( PML_formal_node.getDefault_attribute_id().getValue().getJavaString() );
            }

            return new FormalNode ( name, null, null, defaultAttributeName, null );
        }
    end java

    function is_block_node ( formal_node PML_formal_node<*> ) -> yes_no = not is_inline_node ( i_formal_node )

    function is_inline_node ( formal_node PML_formal_node<*> ) -> yes_no

        case type of i_formal_node
            when PML_formal_inline_node<*>
                return yes
            when PML_formal_block_node<*>
                return no
        .
    .

    function is_block_node_with_raw_text_content ( formal_node PML_formal_node<*> ) -> yes_no

        case type of i_formal_node
            when PML_formal_block_node_with_raw_text_content<*>
                return yes
            otherwise
                return no
        .
    .

    function is_raw_text_node ( formal_node PML_formal_node<*> ) -> yes_no

        case type of i_formal_node
            when PML_formal_block_node_with_raw_text_content<*>,  PML_formal_inline_node_with_raw_text_content<*>
                return yes
            otherwise
                return no
        .
    .
.
