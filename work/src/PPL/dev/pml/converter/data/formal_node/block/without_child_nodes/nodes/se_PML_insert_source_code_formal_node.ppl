// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service PML_insert_source_code_formal_node

    attributes type:string access:private
        from_regex_parameter_id = "from_regex"
        to_regex_parameter_id = "to_regex"
        include_from_regex_parameter_id = "include_from_regex"
        include_to_regex_parameter_id = "include_to_regex"
    .

    att file_parameter formal_parameter<absolute_or_relative_file_path> default:se_formal_parameter_creator.create<absolute_or_relative_file_path> (
        ids = [# se_PML_attribute_ids.file ]
        default_value_supplier = null
        value_parser = fa_absolute_or_relative_file_path_parser.create
        title = "File"
        description = "Absolute or relative path to the source code file. In case of a relative path, it is relative to the working directory at the time of running the PML converter."
        examples = "file = code_examples/hello.ppl" )

    att from_regex_parameter formal_parameter<regex or null> default:se_formal_parameter_creator.create<regex or null> (
        ids = [# a_from_regex_parameter_id ]
        default_value_supplier = { null }
        value_parser = fa_regex_parser_with_multiline_mode.create
        title = "Insert From Regex"
        description = """If this parameter is not defined (set to null by default) then the source code inserted into the document starts at the beginning of the file content. A regular expression can be assigned to this parameter. In that case the source code inserted into the document starts at the first match of the regular expression in the source code file.

If parameter '{{a_include_from_regex_parameter_id}}' is set to 'yes' (default value), then the string that matches the regex is included in the document's source code. If parameter '{{a_include_from_regex_parameter_id}}' is set to 'no' then the string that matches the regex is not included in the document's source code."""
        examples = """{{a_from_regex_parameter_id}} = "function foo ( name string )"
{{a_from_regex_parameter_id}} = "// start insert.*\r?\n" {{a_include_from_regex_parameter_id}} = no""" )

    att to_regex_parameter formal_parameter<regex or null> default:se_formal_parameter_creator.create<regex or null> (
        ids = [# a_to_regex_parameter_id ]
        default_value_supplier = { null }
        value_parser = fa_regex_parser_with_multiline_mode.create
        title = "Insert To Regex"
        description = """If this parameter is not defined (set to null by default) then the source code inserted into the document ends at the end of the file content. A regular expression can be assigned to this parameter. In that case the source code inserted into the document ends at the first match of the regular expression in the source code file. If parameter '{{a_from_regex_parameter_id}}' is also defined, then the search for this regex starts after the match of '{{a_from_regex_parameter_id}}'.

If parameter '{{a_include_to_regex_parameter_id}}' is set to 'yes' (default value), then the string that matches the regex is included in the document's source code. If parameter '{{a_include_to_regex_parameter_id}}' is set to 'no' then the string that matches the regex is not included in the document's source code."""
        examples = """{{a_to_regex_parameter_id}} = "\}\r?\n"
{{a_to_regex_parameter_id}} = "\s*// end insert" {{a_include_to_regex_parameter_id}} = no""" )

    att include_from_regex_parameter formal_parameter<yes_no> default:se_formal_parameter_creator.yes_no (
        ids = [# a_include_from_regex_parameter_id ]
        default_value_supplier = { yes }
        title = "Include From Regex"
        description = """Please refer to the description of parameter '{{a_from_regex_parameter_id}}' for an explanation of this parameter"""
        examples = """{{a_from_regex_parameter_id}} = "// start insert.*\r?\n" {{a_include_from_regex_parameter_id}} = no""" )

    att include_to_regex_parameter formal_parameter<yes_no> default:se_formal_parameter_creator.yes_no (
        ids = [# a_include_to_regex_parameter_id ]
        default_value_supplier = { yes }
        title = "Include To Regex"
        description = """Please refer to the description of parameter '{{a_to_regex_parameter_id}}' for an explanation of this parameter"""
        examples = """{{a_to_regex_parameter_id}} = "// end insert" {{a_include_to_regex_parameter_id}} = no""" )


    att attributes formal_parameters<*> default:any_type_formal_parameters_builder.create
        .add_parameter ( se_formal_node_attributes.id )
        .add_parameter ( a_file_parameter )
        .add_parameter ( se_PML_source_code_formal_node.language_parameter )
        .add_parameter ( se_PML_source_code_formal_node.use_highlighter_parameter )
        .add_parameter ( a_from_regex_parameter )
        .add_parameter ( a_to_regex_parameter )
        .add_parameter ( a_include_from_regex_parameter )
        .add_parameter ( a_include_to_regex_parameter )
        .make_immutable

    att node PML_formal_block_node_without_child_nodes<PML_insert_source_code_node> = \
        PML_formal_block_node_without_child_nodes<PML_insert_source_code_node>.create (
            tags = [# "insert_code" ]
            attributes = a_attributes
            HTML_attributes_allowed = yes
            node_creator = PML_insert_source_code_node_creator.create
            HTML_writer = PML_insert_source_code_node_HTML_writer.create
            documentation = simple_documentation.create (
                title = "Insert Source Code"
                description = "Insert source code stored in an external file."
                examples = '''[insert_code file=resources/ref_manual/resources/source_code/hello_world.ppl]''' ) )
.
