// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service editor

    java_header
        import java.io.File;

        import dev.pp.basics.utilities.os.process.OSCommand;
    end java_header

    function open_editor_for_error ( error anticipated_error, config PML_to_HTML_config )

        const OS_command = i_config.open_file_cmd
        if OS_command is null then
            return
        .

        case type of error
            when text_error text_error
                open_editor_for_text_error ( text_error, OS_command )
            otherwise
                do nothing
        .
    .

    function open_editor_for_text_error ( text_error, OS_command string )

        variable file_path string or null = null
        java
            File file = i_text_error.getJavaTextError().getFileOfLocation();
            if ( file != null ) {
                v_file_path = new fa_string ( file.getCanonicalPath() );
            }
        end java
        if file_path is null then
            return
        .

        const line_number = i_text_error.token?.location?.line_number if_null: 1
        const column_number = i_text_error.token?.location?.column_number if_null: 1

        const OS_command_ = OS_command.replace_all (
            to_replace = "[[file]]"
            replace_by = file_path ).replace_all (
            to_replace = "[[line]]"
            replace_by = line_number.to_string ).replace_all (
            to_replace = "[[column]]"
            replace_by = column_number.to_string )
        assert OS_command_ is not null // avoid "not used" compiler error

        java
            OSCommand.startAndContinue ( c_OS_command_.getJavaString() );
        end java
    .
.