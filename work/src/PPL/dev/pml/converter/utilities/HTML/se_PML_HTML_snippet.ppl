// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service PML_HTML_snippet

    function create_HTML_snippet ( PML_code string ) -> string or anticipated_error

        const code = """{{se_PML_default_values.node_start_symbol}}doc
{{PML_code}}
{{se_PML_default_values.node_end_symbol}}"""
        const file = se_text_file_writer.create_temporary_text_file (
            file_name_extension = se_PML_default_values.PML_file_name_extension
            delete_file_on_exit = yes
            text = code ) on_error: return_error

        const config = PML_to_HTML_config.create_for_PML_file_path ( file.path )
        config.document_TOC_position = PML_TOC_position.none

        const pXML_root_node = se_pXML_parser.try_parse ( config ) on_error:return_error

        const document_node = PML_tree_creator.create.try_create_tree (
            root_node = pXML_root_node
            context = PML_tree_creator_context.create (
                error_handler = config.error_handler ) ) on_error:return_error
        // config.document_source_code_highlighter = document_node.source_code_highlighter

        const writer = memory_string_writer.create
        const context = PML_HTML_writer_context.create ( writer, config )
        context.write_nodes ( nodes = document_node.child_nodes, increase_indent = no )

        const result = writer.get_result
        assert result is not null
        return result
    .

    tests
        const r string = create_HTML_snippet ( "This is [i important]." ) type_check:no
        verify r =v '''<p class="pml-paragraph">This is <i class="pml-italic">important</i>.</p>
'''
    .
.
