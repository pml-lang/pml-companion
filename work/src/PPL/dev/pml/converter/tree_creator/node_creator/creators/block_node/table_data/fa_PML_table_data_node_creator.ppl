// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

factory PML_table_data_node_creator type:PML_node_creator<PML_table_data_node>

    function create_node

        const text = i_context.non_null_raw_text_content
        const lines = get_lines ( text, i_context ) on_error: return_error

        const first_line = lines.first
        const column_separator_regex = get_column_separator_regex ( first_line )
        const column_count = get_column_count ( first_line, column_separator_regex )

        const header_row = get_header_row ( lines, column_separator_regex )
        const footer_row = get_footer_row ( lines, column_separator_regex )

        const body_rows = get_body_rows ( lines, column_separator_regex, i_context ) on_error: return_error

        check_column_counts ( column_count, header_row, footer_row, body_rows, i_context ) on_error: return_error

        const column_horizontal_alignments = se_PML_table_creator.get_column_horizontal_alignments (
            column_count, i_context ) // on_error: return_error

        return PML_table_data_node.create (
            node_id = i_context.get_id_or_null
            HTML_attributes = i_context.HTML_attributes
            text,
            header_row,
            body_rows,
            footer_row,
            column_horizontal_alignments )
    .

    functions access:private

        get_lines ( text string, context PML_node_creator_context ) -> mutable_indexed_list<string> or text_error

            // const r = i_text.split_by_new_line.stream.skip_nulls.to_mutable_indexed_list

            const r = mutable_indexed_list<string>.create

            const all_lines = i_text.split_by_new_line
            repeat for each line in all_lines
                if line is not null then
                    r.append ( line )
                .
            .

            if r.is_empty then
                return i_context.canceling_error_for_node (
                    id = "ROWS_MISSING"
                    info = "There are no rows defined." )
            .

            return r
        .

        get_column_separator_regex ( first_line string ) -> regex or null

            if i_first_line.contains ( "\t" ) then
                return se_PML_node_creator_regexes.tab_separator
            else if i_first_line.contains ( "," ) then
                return se_PML_node_creator_regexes.comma_separator
            else
                return null
            .
        .

        get_column_count ( first_line string, column_separator_regex regex or null ) -> pos_32

            if i_column_separator_regex is null then
                return 1
            .

            return first_line.split_by_regex ( i_column_separator_regex ).size
        .

        get_header_row ( lines mutable_indexed_list<string>, column_separator_regex regex or null ) -> list<string or null> or null

            if lines.size <# 2 then
                return null
            .

            if lines.get ( 2 ) #v "-" then
                return null
            .

            const first_line = lines.first
            lines.remove_first
            lines.remove_first

            return get_row_cells ( row = first_line, i_column_separator_regex )
        .

        get_footer_row ( lines mutable_indexed_list<string>, column_separator_regex regex or null ) -> list<string or null> or null

            if lines.size <# 2 then
                return null
            .

            if lines.get ( lines.size - 1 ) #v "-" then
                return null
            .

            const last_line = lines.last
            lines.remove_last
            lines.remove_last

            return get_row_cells ( row = last_line, i_column_separator_regex )
        .

        get_body_rows -> list<list<string or null>> or text_error
            in lines mutable_indexed_list<string>
            in column_separator_regex regex or null
            in context PML_node_creator_context

            if lines.is_empty then
                return i_context.canceling_error_for_node (
                    id = "BODY_ROWS_MISSING"
                    info = "There are no body rows defined." )
            .

            const r = mutable_list<list<string or null>>.create
            repeat for each line in lines
                const cells = get_row_cells ( row = line, i_column_separator_regex )
                r.append ( cells )
            .

            return r.make_immutable
        .

        get_row_cells ( row string, column_separator_regex regex or null ) -> list<string or null>

            if i_column_separator_regex is null then
                return list_with_nulls<string or null>.create_singleton ( i_row )
            .

            return i_row.split_by_regex ( i_column_separator_regex )
        .

        check_column_counts -> text_error or null
            in column_count pos_32
            in header_row list<string or null> or null
            in footer_row list<string or null> or null
            in body_rows list<list<string or null>>
            in context PML_node_creator_context

            if i_header_row is not null then
                check_column_count ( i_column_count, row = i_header_row, label = "The table's header row", i_context ) on_error:return_error
            .

            repeat for each body_row in i_body_rows counter:index
                check_column_count ( i_column_count, row = body_row, label = """The row number {{index}} in the table's body""", i_context ) on_error:return_error
            .

            if i_footer_row is not null then
                check_column_count ( i_column_count, row = i_footer_row, label = "The table's footer row", i_context ) on_error:return_error
            .

            return null
        .

        check_column_count -> text_error or null
            in column_count pos_32
            in row list<string or null>
            in label string
            in context PML_node_creator_context

            if i_row.size =v i_column_count then
                return null
            else
                return i_context.canceling_error_for_node (
                    id = "INVALID_COLUMN_COUNT"
                    info = """{{label}} must contain {{i_column_count}} cells. But it actually contains {{i_row.size}} cells. Values:
{{i_row.to_long_string}}""" )
            .
        .
    .

    creator create kind:in_all
.
