// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

factory PML_tree_creator

    attributes kind:variable access:private

        context PML_tree_creator_context default:PML_tree_creator_context.create

        current_chapter_level pos_32 default:1

        keep_whitespace_in_text yes_no default:no
    .

    function try_create_tree

        case type of try_create_tree_2 ( root_node, context )

            when PML_document_node node
                return node

            when text_error text_error
                return text_error

            when anticipated_error canceling_error
                const text_error = text_error.create (
                    id = "ERROR"
                    info = canceling_error.info
                    token = null )
                i_context.error_handler.handle_error ( text_error )
                return text_error
        .
    .


    functions access:private

        function try_create_tree_2 -> PML_document_node or anticipated_error // TD? PML_code_error
            in root_node mutable_PDML_AST_node
            in context PML_tree_creator_context

            a_context = i_context

            const formal_root_node = se_PML_standard_formal_nodes.document

            const root_name = i_root_node.name.local_name.text
            if root_name #v formal_root_node.standard_tag then
                return canceling_error (
                    id = "INVALID_ROOT_NODE"
                    info = """'{{root_name}}' is invalid. A document must start with a '{{formal_root_node.standard_tag}}' node."""
                    token = i_root_node.name.token )
            .

            a_context.define_nodes_with_id_attribute ( i_root_node )

            const node_context = create_node_creator_context ( i_root_node ) on_error:return_error

            return PML_document_node_creator.create.create_node ( node_context )
        .

        create_node_creator_context -> PML_node_creator_context or anticipated_error
            in pXML_node mutable_PDML_AST_node

            // TD check no namespace prefix used
            // TD check no namespace defined

            const formal_node = get_formal_node ( i_pXML_node ) on_error:return_error

            const non_HTML_attributes = get_non_HTML_attributes ( i_pXML_node, formal_node ) on_error:return_error

            const HTML_attributes = get_attributes_string_map ( i_pXML_node, for_HTML_attributes = yes )

            const this_chapter_level = a_current_chapter_level

            check_child_nodes_allowed ( i_pXML_node, formal_node )

            variable has_inline_child_nodes yes_no
            if se_formal_node.is_block_node ( formal_node ) then
                case type of formal_node
                    when PML_formal_block_node_with_child_nodes<*>
                        has_inline_child_nodes = formal_node.child_nodes_are_inline_nodes
                    otherwise
                        has_inline_child_nodes = no
                .
            else
                has_inline_child_nodes = yes
            .

            variable block_child_nodes list<PML_block_node> or null = null
            variable inline_child_nodes list<PML_inline_node> or null = null
            if has_inline_child_nodes then
                const inline_child_nodes_ = create_inline_child_nodes (
                    parent_node = i_pXML_node
                    parent_formal_node =  formal_node ) on_error:return_error
                inline_child_nodes = inline_child_nodes_
            else
                const block_child_nodes_ = create_block_child_nodes (
                    parent_node = i_pXML_node
                    parent_formal_node =  formal_node ) on_error:return_error
                block_child_nodes = block_child_nodes_
            .

            const raw_text_content string or null = get_raw_text_content ( i_pXML_node, formal_node )

            return PML_node_creator_context.create (
                i_pXML_node, formal_node,
                non_HTML_attributes, HTML_attributes, block_child_nodes, inline_child_nodes, raw_text_content,
                current_chapter_level = this_chapter_level
                tree_context = a_context )
        .

        get_formal_node ( pXML_node mutable_PDML_AST_node ) -> PML_formal_node<*> or text_error

            const name = i_pXML_node.name.local_name.text
            const formal_node = se_PML_formal_node_registry.get_by_any_tag_or_null ( name )
            if formal_node is not null then
                return formal_node
            else
                // TD use 'similar names algorithm' to make suggestions
                return canceling_error (
                    id = "INVALID_NODE_NAME"
                    info = """'{{name}}' is an invalid node name.
Valid names are: {{se_PML_formal_node_registry.sorted_any_tag_list.to_long_string}}."""
                    token = i_pXML_node.name.token )
            .
        .

        // attributes

        function get_non_HTML_attributes -> any_type_parameters or null or text_error
            in pXML_node mutable_PDML_AST_node
            in formal_node PML_formal_node<*>

            const r = se_parameters_creator.try_create_from_string_map_or_null (
                string_map = get_attributes_string_map ( i_pXML_node, for_HTML_attributes = no )
                formal_parameters = i_formal_node.attributes )

            case type of r

                when any_type_parameters
                    return r
                when null
                    return null
                when parameter_errors parameter_errors

                    variable first_error text_error or null = null

                    repeat for each parameter_error in parameter_errors.list

                        variable token text_token or null = null
                        if parameter_error.parameter_id?.value as id_string is not null then
                            const AST_attribute = i_pXML_node.attributes?.get_or_null ( id_string )
                            // token = AST_attribute?.value
                            token = AST_attribute?.name.token
                        .
                        if token is null then
                            token = i_pXML_node.name.token
                        .

                        const error = text_error.create (
                            id = "INVALID_ATTRIBUTE"
                            info = parameter_error.info
                            token )

                        a_context.error_handler.handle_error ( error )

                        if first_error is null then
                            first_error = error
                        .
                    .

                    return first_error
            .
        .

        get_attributes_string_map -> map<key:string, value:string or null> or null
            in pXML_node mutable_PDML_AST_node
            in for_HTML_attributes yes_no

            const attributes = i_pXML_node.attributes?.get_list
            if attributes is null then
                return null
            .

            const r = mutable_map_with_nulls<key:string value:string or null>.create

            repeat for each attribute in attributes
                const name = attribute.name.local_name.text
                const is_HTML_attribute = se_PML_attribute_ids.is_HTML_attribute_name ( name )
                if ( is_HTML_attribute and i_for_HTML_attributes ) or \
                    ( not is_HTML_attribute and not i_for_HTML_attributes ) then
                    r.add (
                        key = name
                        value = attribute.value.text )
                .
            .

            return r.make_immutable_or_null
        .


        // child nodes

        check_child_nodes_allowed ( pXML_node mutable_PDML_AST_node, formal_node PML_formal_node<*> )

            variable child_nodes_allowed = no
            case type of formal_node
                when PML_formal_block_node_without_child_nodes<*>
                    child_nodes_allowed = no
                when PML_formal_inline_node_without_child_nodes<*>
                    child_nodes_allowed = no
                otherwise
                    child_nodes_allowed = yes
            .

            const child_nodes = i_pXML_node.child_nodes
            if not child_nodes_allowed then
                if child_nodes is not null then
                    non_canceling_error (
                        id = "CHILD_NODES_NOT_ALLOWED"
                        info = """Node '{{i_pXML_node.name.full_name}}' cannot have any content."""
                        token = child_nodes.first_child.token )
                .
            else
                /// disabled, because nodes like 'tc' can be empty
                if child_nodes is null then
                    warning (
                        id = "NODE_SHOULD_NOT_BE_EMPTY"
                        info = """The content of node '{{i_pXML_node.name.full_name}}' is empty."""
                        token = i_pXML_node.name.token )
                .
                .///
            .
        .

        create_block_child_nodes -> list<PML_block_node> or null or anticipated_error
            in parent_node mutable_PDML_AST_node
            in parent_formal_node PML_formal_node<*>

            const pXML_child_nodes = i_parent_node.child_nodes?.get_list on_null:return null

            const is_chapter_node = parent_formal_node =r se_PML_chapter_formal_node.node
            if is_chapter_node then
                a_current_chapter_level = a_current_chapter_level + 1
            .

            const block_nodes = mutable_list<PML_block_node>.create

            variable current_paragraph_inline_nodes mutable_list<PML_inline_node> or null = null

            repeat for each pXML_child_node in pXML_child_nodes

                case type of pXML_child_node

                    when node__AST_node_child

                        const context = create_node_creator_context ( pXML_child_node.node ) on_error:return_error
                        const formal_child_node = context.formal_node
                        const node = formal_child_node.node_creator.create_node ( context ) on_error: return_error

                        if se_formal_node.is_block_node ( formal_child_node ) then

                            if current_paragraph_inline_nodes is not null then
                                append_paragraph (
                                    block_nodes,
                                    inline_nodes = current_paragraph_inline_nodes )
                                current_paragraph_inline_nodes = null
                            .

                            const node_ PML_block_node = node type_check:no
                            block_nodes.append ( node_ )

                        else
                            const node_ PML_inline_node = node type_check:no
                            if current_paragraph_inline_nodes is null then
                                current_paragraph_inline_nodes = mutable_list<PML_inline_node>.create
                            .
                            assert current_paragraph_inline_nodes is not null
                            current_paragraph_inline_nodes.append ( node_ )
                        .

                    when text__AST_node_child node_text

                        if current_paragraph_inline_nodes is null then
                            current_paragraph_inline_nodes = mutable_list<PML_inline_node>.create
                        .
                        assert current_paragraph_inline_nodes is not null
                        current_paragraph_inline_nodes = split_text_into_paragraphs (
                            node_text
                            block_nodes
                            paragraph_inline_nodes = current_paragraph_inline_nodes )

                    // when node_comment
                    //    do nothing
                .
            .

            if current_paragraph_inline_nodes is not null then
                append_paragraph (
                    block_nodes,
                    inline_nodes = current_paragraph_inline_nodes )
                current_paragraph_inline_nodes = null
            .

            if is_chapter_node then
                a_current_chapter_level = a_current_chapter_level - 1
            .

            return block_nodes.make_immutable_or_null
        .

        split_text_into_paragraphs -> mutable_list<PML_inline_node>
            in node_text text__AST_node_child
            in block_nodes mutable_list<PML_block_node>
            in paragraph_inline_nodes mutable_list<PML_inline_node>

            const text = node_text.text.text // on_null: return paragraph_inline_nodes

            // Two consecutive new lines are treated as a paragraph break

            const paragraph_texts = text.split_by_regex ( se_PML_node_creator_regexes.paragraph_break )
            if paragraph_texts.first as first_text is not null then
                append_inline_text_node (
                    inline_nodes = paragraph_inline_nodes
                    text = first_text )
            .

            if paragraph_texts.size =v 1 then
                return paragraph_inline_nodes
            .

            append_paragraph ( block_nodes, inline_nodes = paragraph_inline_nodes )

            if paragraph_texts.size >= 3 then
                repeat from mid_index = 2 to paragraph_texts.size - 1
                    if paragraph_texts.get ( mid_index ) as mid_text is not null then
                        const singleton_inline_nodes = mutable_list<PML_inline_node>.create
                        append_inline_text_node (
                            inline_nodes = singleton_inline_nodes
                            text = mid_text )
                        append_paragraph (
                            block_nodes,
                            inline_nodes = singleton_inline_nodes )
                    else
                        /// TD?
                        append_paragraph ( block_nodes, inline_nodes )
                        new_paragraph_inline_nodes = mutable_list<PML_inline_node>.create
                        .///
                    .
                .
            .

            const new_paragraph_inline_nodes = mutable_indexed_list<PML_inline_node>.create
            if paragraph_texts.last as last_text is not null then
                append_inline_text_node ( inline_nodes = new_paragraph_inline_nodes, text = last_text )
            .

            return new_paragraph_inline_nodes
        .

        append_paragraph
            in block_nodes mutable_list<PML_block_node>
            in inline_nodes mutable_list<PML_inline_node>

            if inline_nodes.is_empty then
                return
            .

            // remove space at end of paragraph
            case type of inline_nodes.last
                when PML_text_node text_node
                    const text = text_node.text
                    if text.ends_with ( " " ) then
                        if text.size =v 1 then
                            inline_nodes.remove_last
                            if inline_nodes.is_empty then
                                return
                            .
                        else
                            inline_nodes.replace_last ( PML_text_node.create ( text.remove_last ) )
                        .
                    .
                otherwise
                    do nothing
            .

            const paragraph = PML_paragraph_node.create (
                node_id = null, HTML_attributes = null, child_nodes = inline_nodes.make_immutable )
            block_nodes.append ( paragraph )
        .

        create_inline_child_nodes -> list<PML_inline_node> or null or anticipated_error
            in parent_node mutable_PDML_AST_node
            in parent_formal_node PML_formal_node<*>

            const pXML_child_nodes = i_parent_node.child_nodes?.get_list on_null:return null

            if parent_formal_node =r se_PML_monospace_formal_node.node then
                a_keep_whitespace_in_text = yes
            .

            const inline_nodes = mutable_list<PML_inline_node>.create

            repeat for each pXML_child_node in pXML_child_nodes

                case type of pXML_child_node

                    when node__AST_node_child
                        const context = create_node_creator_context ( pXML_child_node.node ) on_error:return_error
                        const formal_child_node = context.formal_node
                        if se_formal_node.is_inline_node ( formal_child_node ) then
                            const node_ = formal_child_node.node_creator.create_node ( context ) on_error: return_error
                            const node PML_inline_node = node_ type_check:no
                            inline_nodes.append ( node )
                        else
                            non_canceling_error (
                                id = "INLINE_CHILD_NODE_REQUIRED"
                                info = """Node '{{i_parent_node.name.full_name}}' defined at
{{i_parent_node.name.token?.location?.to_string if_null: "unknown location"}}
cannot contain block nodes. It can only contain inline nodes.
But '{{pXML_child_node.node.name.full_name}}' is not an inline node (it is a block node)."""
                                token = pXML_child_node.node.name.token )
                        .

                    when text__AST_node_child node_text
                        // if not node_text.text.is_empty
                            append_inline_text_node (
                                inline_nodes
                                text = node_text.text.text )
                        // .

                    // when node_comment
                    //    do nothing
                .
            .

            if parent_formal_node =r se_PML_monospace_formal_node.node then
                a_keep_whitespace_in_text = no
            .

            return inline_nodes.make_immutable_or_null
        .

        append_inline_text_node
            in inline_nodes mutable_list<PML_inline_node>
            in text string

            const trimmed_text = if a_keep_whitespace_in_text \
                then i_text.to_string \
                else trim_whitespace_in_text ( text = i_text.to_string, is_first_node = inline_nodes.is_empty )
            if trimmed_text is null then
                return
            .

            inline_nodes.append ( PML_text_node.create ( trimmed_text ) )
        .

        trim_whitespace_in_text ( text string, is_first_node yes_no ) -> string or null

            // replace sequences of whitespace with one space
            variable trimmed_text = i_text.replace_all_regex (
                to_replace = se_PML_node_creator_regexes.whitespace
                replace_by = " " )

            if i_is_first_node then
                if trimmed_text.starts_with ( " " ) then
                    if trimmed_text.size =v 1 then
                        return null
                    .
                    trimmed_text = trimmed_text.remove_first
                .
            .

            return trimmed_text
        .


        // raw text nodes

        get_raw_text_content -> string or null
            in pXML_node mutable_PDML_AST_node
            in formal_node PML_formal_node<*>

            if not se_formal_node.is_raw_text_node ( formal_node ) then
                return null
            .

            const text = i_pXML_node.child_nodes?.get_single_text_content_or_null
            if text is null then
                // TD improve error message
                non_canceling_error (
                    id = "NODE_MUST_CONTAIN_TEXT"
                    info = """Node '{{i_pXML_node.name.full_name}}' must contain text."""
                    token = i_pXML_node.name.token )
            .

            return text if_null:"ERROR"
        .


        // error handling

        canceling_error -> text_error
            in id string
            in info string
            in token text_token or null

            return a_context.canceling_error ( id, info, token )
        .

        non_canceling_error
            in id string
            in info string
            in token text_token or null

            a_context.non_canceling_error ( id, info, token )
        .

        warning
            in id string
            in info string
            in token text_token or null

            a_context.warning ( id, info, token )
        .
    .


    creator create kind:in_all

.
