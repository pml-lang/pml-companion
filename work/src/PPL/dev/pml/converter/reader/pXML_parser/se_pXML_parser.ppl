// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service pXML_parser

    java_header
        import java.util.HashMap;
        import java.util.Map;

        import org.ppl.core.collections.java.se_Java_collection_utilities;

        import dev.pp.basics.annotations.NotNull;

        import dev.pp.text.reader.exception.InvalidTextException;
        import dev.pp.text.token.TextToken;

        import dev.pp.scripting.env.ScriptingEnvironmentImpl;;

        import dev.pdml.core.data.AST.attribute.ASTNodeAttribute;
        import dev.pdml.core.data.AST.attribute.ASTNodeAttributes;
        import dev.pdml.core.data.formalNode.FormalNode;
        import dev.pdml.core.data.formalNode.FormalNodes;
        import dev.pdml.core.data.formalNode.PDMLType;
        import dev.pdml.ext.extensions.types.TextBlockType;
        import dev.pdml.core.data.node.name.NodeName;
        import dev.pdml.core.parser.eventHandler.NodeEndEvent;
        import dev.pdml.core.parser.eventHandler.NodeStartEvent;
        import dev.pdml.core.parser.eventHandler.PDMLParserEventHandler;
        import dev.pdml.ext.utilities.parser.PDMLParserBuilder;
        import dev.pdml.core.reader.extensions.PDMLExtensionsHandler;

        import dev.pdml.ext.extensions.PDMLExtensionsHandlerImpl;
        // import dev.pdml.ext.extensions.node.PDMLExtensionNodeHandler;
        // import dev.pdml.ext.extensions.utilities.SetConstant_ExtensionHandler;
        // import dev.pdml.ext.extensions.utilities.GetConstant_ExtensionHandler;
        // import dev.pdml.ext.extensions.utilities.InsertFile_ExtensionHandler;

        import dev.pml.converter.data.formal_node.block.with_raw_text_content.nodes.se_PML_HTML_code_formal_node;
        import dev.pml.converter.data.formal_node.block.with_raw_text_content.nodes.se_PML_input_formal_node;
        import dev.pml.converter.data.formal_node.block.with_raw_text_content.nodes.se_PML_output_formal_node;
        import dev.pml.converter.data.formal_node.block.with_raw_text_content.nodes.se_PML_source_code_formal_node;
        import dev.pml.converter.data.formal_node.se_PML_formal_node_registry;
        import dev.pml.converter.data.formal_node.ty_PML_formal_node;
        import dev.pml.converter.PP_text_bridge.error.fa_text_error;
        import dev.pml.converter.PP_text_bridge.token.fa_text_token;
        import dev.pml.converter.PDML_bridge.data.node.attribute.fa_AST_node_attribute;
        import dev.pml.converter.PDML_bridge.data.node.attribute.fa_AST_node_attributes;
        import dev.pml.converter.PDML_bridge.data.node.attribute.ty_AST_node_attributes;
        import dev.pml.converter.PDML_bridge.data.node.fa_mutable_PDML_AST_node;
        import dev.pml.converter.PDML_bridge.data.node.name.fa_AST_node_name;
        import dev.pml.converter.PDML_bridge.data.node.name.ty_AST_node_name;
        import dev.pml.converter.PDML_bridge.data.node.ty_mutable_PDML_AST_node;
    end java_header

    java
        static class CreateTree_PDMLParserEventHandler implements PDMLParserEventHandler<ty_mutable_PDML_AST_node, ty_mutable_PDML_AST_node> {


            private ty_mutable_PDML_AST_node rootNode;


            public CreateTree_PDMLParserEventHandler() {}


            public void onStart() {}

            public void onEnd () {}

            public @NotNull ty_mutable_PDML_AST_node onRootNodeStart ( @NotNull NodeStartEvent event ) {

                rootNode = createNode ( event );
                return rootNode;
            }

            public void onRootNodeEnd ( @NotNull NodeEndEvent event, @NotNull ty_mutable_PDML_AST_node node ) {}

            public @NotNull ty_mutable_PDML_AST_node onNodeStart ( @NotNull NodeStartEvent event, @NotNull ty_mutable_PDML_AST_node parent_node ) {

                ty_mutable_PDML_AST_node node = createNode ( event );
                parent_node.append_child_node ( node );
                return node;
            }

            public void onNodeEnd ( @NotNull NodeEndEvent event, @NotNull ty_mutable_PDML_AST_node node ) {}

            public void onAttributes ( @NotNull ASTNodeAttributes JavaAttributes, @NotNull ty_mutable_PDML_AST_node parent_node ) {

                ty_AST_node_attributes attributes = fa_AST_node_attributes.create();

                for ( ASTNodeAttribute JavaAttribute : JavaAttributes.getList() ) {
                    attributes.add ( fa_AST_node_attribute.createFromJava ( JavaAttribute ) );
                }

                parent_node.setAttributes ( attributes );
            }

            public void onText ( @NotNull TextToken textToken, @NotNull ty_mutable_PDML_AST_node parent_node ) {

                parent_node.append_text_child (
                    fa_text_token.createFromJava ( textToken ) );
            }

            public void onComment ( @NotNull TextToken textToken, @NotNull ty_mutable_PDML_AST_node parent_node ) {

                // ignore comments
            }

            public @NotNull ty_mutable_PDML_AST_node getResult() { return rootNode; }


            private @NotNull ty_mutable_PDML_AST_node createNode ( @NotNull NodeStartEvent event ) {

                ty_AST_node_name name = fa_AST_node_name.createFromJava ( event.getName() );

                return fa_mutable_PDML_AST_node.create_for_name ( name );
            }

        }

        private static FormalNodes createFormalNodes() {

            FormalNodes formalNodes = new FormalNodes();

            se_Java_collection_utilities.forEachElementInList ( se_PML_formal_node_registry.get_list(), PML_formal_node -> {
                formalNodes.add ( PML_formal_node.getPMDLFormalNode() );
            } );

            return formalNodes;
        }

        private static PDMLExtensionsHandler createExtensionsHandler() {

            /* disabled, because PML uses PDML's syntax

            Map<String, PDMLExtensionNodeHandler> customizedExtensionNodeHandlers =
                new HashMap<>();

            customizedExtensionNodeHandlers.put (
                se_PML_insert_file_formal_node.getNode().standard_tag().getJavaString(),
                new InsertFile_ExtensionHandler() );

            customizedExtensionNodeHandlers.put (
                se_PML_declare_constant_formal_node.getNode().standard_tag().getJavaString(),
                new SetConstant_ExtensionHandler() );
            customizedExtensionNodeHandlers.put (
                "ins-const",
                new GetConstant_ExtensionHandler() );

            return new PDMLExtensionsHandlerImpl ( customizedExtensionNodeHandlers );
            */

            return new PDMLExtensionsHandlerImpl();
        }
    end java

    function try_parse ( config PML_to_HTML_config ) -> mutable_PDML_AST_node or text_error

        const PML_input_file = require_input_file ( i_config )
        return try_parse_file ( file = PML_input_file, error_handler = i_config.error_handler )
    .

    functions access:private

        function try_parse_file ( file, error_handler text_error_handler ) -> mutable_PDML_AST_node or text_error

            variable pXML_root_node ty_mutable_PDML_AST_node or null = null
            variable canceling_error text_error or null = null

            java
                PDMLParserEventHandler<ty_mutable_PDML_AST_node, ty_mutable_PDML_AST_node> eventHandler =
                    new CreateTree_PDMLParserEventHandler();

                try {
                    new PDMLParserBuilder<> ( eventHandler )
                        .setErrorHandler ( i_error_handler.getJavaTextErrorHandler() )
                        .setExtensionsHandler ( createExtensionsHandler() )
                        .setScriptingEnvironment ( new ScriptingEnvironmentImpl(true) )
                        .setFormalNodes ( createFormalNodes() )
                        .parseFile ( i_file.getJavaFile() );
                } catch ( InvalidTextException e ) {
                    v_canceling_error = fa_text_error.createFromJava ( e.toTextError() );
                }
                v_pXML_root_node = eventHandler.getResult();
            end java

            if canceling_error is null then
                assert pXML_root_node is not null
                return pXML_root_node
            else
                return canceling_error
            .
        .

        function require_input_file ( config PML_to_HTML_config ) -> file

            const r = i_config.PML_input_file
            if r is not null then
                return r
            else
                throw "Requiring an input file."
            .
        .
    .
.
