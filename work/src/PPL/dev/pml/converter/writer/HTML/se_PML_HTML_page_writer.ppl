// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service PML_HTML_page_writer

    function write_page ( document_node PML_document_node, config PML_to_HTML_config ) -> runtime_error or null

        const writer = text_file_writer.create_for_new_or_existing_file (
            file = i_config.HTML_output_file
            append_mode = no ) on_error:return_error

        const context = PML_HTML_writer_context.create ( writer, config )

        write_HTML_page_header ( context, config, document_title = document_node.title_text ) on_error:return_error

        write_HTML_body_start ( context, document_node, config )

        se_PML_document_formal_node.node.HTML_writer.write (
            node = i_document_node, context, i_config )

        write_HTML_body_end ( context )

        write_HTML_page_footer ( context, config ) on_error:return_error

        return writer.try_close
    .

    functions access:private

        function write_HTML_page_header -> runtime_error or null
            in context PML_HTML_writer_context
            in config PML_to_HTML_config
            in document_title string or null

            if i_config.HTML_header as HTML_header is not null then
                const header_template = HTML_header.get on_error: return_error
                context.write ( adapt_HTML_page_header ( header_template, i_context, i_config, i_document_title ) )
            .

            context.increase_indent
            context.increase_indent

            return null
        .

        function adapt_HTML_page_header -> string
            in header_template string
            in context PML_HTML_writer_context
            in config PML_to_HTML_config
            in document_title string or null

            variable r = header_template

            const to_replace = "[[=title]]"
            if document_title is not null then
                const title = i_context.escape_HTML ( i_document_title )
                r = r.replace_first (
                    to_replace,
                    replace_by = title )
            else
                const t = r.remove_all_substrings ( to_replace )
                assert t is not null
                r = t
            .

            r = r.replace_first (
                to_replace = "[[=PML_version]]"
                replace_by = se_PML_to_HTML_Converter.version )

            const head_end = mutable_string.create

            if not i_config.omit_CSS then
                head_end.append_line ( """        <link rel="stylesheet" href="css/{{se_PML_default_values.CSS_file.name}}">""" )
                head_end.append_line ( """        <link rel="stylesheet" href="css/{{se_PML_default_values.CSS_print_file.name}}" media="print">""" )
                case enum of i_config.source_code_highlighter
                    when highlightjs
                        head_end.append_line (
                            '''        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css">''' )
                    when prism
                        head_end.append_line (
                            '''        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/themes/prism.min.css">''' )
                    when none
                        do nothing
                .
            .

            if not head_end.is_empty then
                r = r.replace_first (
                    to_replace = "[[=head_end]]"
                    replace_by = head_end.to_string )
            else
                const t = r.remove_all_substrings ( "[[=head_end]]" )
                assert t is not null
                r = t
            .

            const body_start = mutable_string.create
            case enum of i_config.source_code_highlighter

                when highlightjs
                    body_start.append_line (
                        '''        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js"></script>
        <script>hljs.highlightAll();</script>''' )

                when prism
                    body_start.append_line (
                        '''        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/prism.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/plugins/autoloader/prism-autoloader.min.js"></script>''' )

                when none
                    do nothing
            .
            if body_start.is_empty then
                const temp = r.remove_all_substrings ( "[[=body_start]]" ) on_null: throw "impossible"
                r = temp
            else
                r = r.replace_first (
                    to_replace = "[[=body_start]]"
                    replace_by = body_start.to_string )
            .

            return r.to_string
        .

        function write_HTML_page_footer -> runtime_error or null
            in context PML_HTML_writer_context
            in config PML_to_HTML_config

            context.decrease_indent
            context.decrease_indent

            if i_config.HTML_footer as HTML_footer is not null then
                const footer_text = HTML_footer.get on_error: return_error
                context.write ( footer_text )
            .

            return null
        .

        function write_HTML_body_start
            in context PML_HTML_writer_context
            in document_node PML_document_node
            in config PML_to_HTML_config

            context.write_HTML_block_tag_start ( HTML_tag_name = "div", CSS_class_name = "pml-doc-wrapper" )
            context.increase_indent

            context.write_HTML_block_tag_start ( HTML_tag_name = "header", CSS_class_name = "pml-doc-header" )
            context.write_HTML_block_tag_end ( "header" )

            context.write_HTML_block_tag_start ( HTML_tag_name = "div", CSS_class_name = "pml-doc-content" )
            context.increase_indent

            context.write_HTML_block_tag_start ( HTML_tag_name = "aside", CSS_class_name = "pml-doc-left" )
            context.increase_indent

            if i_config.TOC_position =r PML_TOC_position.left then
                se_PML_HTML_TOC.write_TOC ( document_node, context, max_level = 10 )
            .

            context.decrease_indent
            context.write_HTML_block_tag_end ( "aside" )
        .

        function write_HTML_body_end ( context PML_HTML_writer_context )

            context.write_HTML_block_tag_start ( HTML_tag_name = "aside", CSS_class_name = "pml-doc-right" )
            context.write_HTML_block_tag_end ( "aside" )

            context.decrease_indent
            context.write_HTML_block_tag_end ( "div" )

            context.write_HTML_block_tag_start ( HTML_tag_name = "footer", CSS_class_name = "pml-doc-footer" )
            context.write_HTML_block_tag_end ( "footer" )

            context.decrease_indent
            context.write_HTML_block_tag_end ( "div" )
        .
    .
.
