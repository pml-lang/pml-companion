// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

factory PML_image_node_HTML_writer type:PML_node_HTML_writer<PML_image_node>

    function write

        // alignment
        context.write_indent_and_string ( "<figure" )
        context.write_node_id ( i_node )
        context.write_line ( """ style="text-align: {{i_node.alignment}}">""" )
        context.increase_indent

        // link
        if i_node.link as link is not null then
            context.write_indent_and_string_and_new_line ( """<a href="{{i_context.escape_HTML ( link.to_string )}}">""" )
            context.increase_indent
        .

        // image
        write_image ( i_node, context )

        // close

        if i_node.link is not null then
            context.decrease_indent
            context.write_indent_and_string_and_new_line ( "</a>" )
        .

        context.write_node_caption ( i_node.caption )

        context.decrease_indent
        context.write_indent_and_string_and_new_line ( "</figure>" )
    .

    function write_image access:private ( node PML_image_node, context PML_HTML_writer_context )

        variable CSS_class_name = "pml-image"
        if i_node.border then
            CSS_class_name = CSS_class_name & " pml-bordered"
        .

        context.write_indent_and_string ( "<img" )
        context.write_HTML_attributes_for_node ( node, CSS_class_name )

        const Unix_path = se_directory_or_file_path.to_Unix_path ( i_node.source.to_string )
        context.write ( """ src="{{i_context.escape_HTML ( Unix_path )}}"""" )

///
        if not se_PML_HTML_attributes.has_HTML_attribute ( i_node, HTML_attribute_id = "alt" ) then
            const alt_value = i_node.title if_null: i_node.caption
            if alt_value is not null then
                context.write ( """ alt="{{i_context.escape_HTML ( alt_value )}}"""" )
            .
        .
.///

        if i_node.width as width is not null then
            context.write ( """ width="{{width}}"""" )
        .

        if i_node.height as height is not null then
            context.write ( """ height="{{height}}"""" )
        .

        context.write_line ( " />" )
    .

    creator create kind:in_all
.
