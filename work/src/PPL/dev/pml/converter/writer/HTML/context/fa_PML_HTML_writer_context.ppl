// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

factory PML_HTML_writer_context

    attributes access:private
        current_indent mutable_string default:mutable_string.create
        single_indent string default: "    "
    .

    functions

        // basics

        write
            a_writer.try_write ( string ) on_error:throw_error
        .

        write_line
            a_writer.try_write_line ( string ) on_error:throw_error
        .

        write_new_line
            a_writer.try_write_new_line on_error:throw_error
        .


        // escape

        escape_HTML = se_HTML_utilities.escape_HTML ( i_string )

        write_escaped_HTML
            write ( escape_HTML ( i_string ) )
        .


        // indent

        write_indent
            if not a_current_indent.is_empty then
                a_writer.try_write ( a_current_indent.to_string ) on_error:throw_error
            .
        .

        write_indent_and_string
            write_indent
            write ( string )
        .

        write_indent_and_string_and_new_line
            write_indent
            a_writer.try_write_line ( string ) on_error:throw_error
        .

        increase_indent
            a_current_indent.append ( a_single_indent )
        .

        decrease_indent
            a_current_indent.remove_last_n ( a_single_indent.size )
        .


        // HTML

        write_HTML_tag_start

            if i_write_indent then
                co_write_indent
            .

            write ( """<{{i_HTML_tag_name}}""" )
            if i_CSS_class_name is not null then
                write_HTML_class_attribute ( i_CSS_class_name )
            .
            if i_attributes is not null then
                write_HTML_attributes ( i_attributes )
            .
            write ( ">" )

            if i_append_new_line then
                write_new_line
            .
        .

        write_HTML_block_tag_start

            write_HTML_tag_start ( write_indent = yes, i_HTML_tag_name, i_CSS_class_name, append_new_line = yes )
        .

        write_HTML_inline_tag_start

            write_HTML_tag_start ( write_indent = no, i_HTML_tag_name, i_CSS_class_name, append_new_line = no )
        .

        write_HTML_tag_end

            if i_write_indent then
                co_write_indent
            .

            write ( """</{{i_HTML_tag_name}}>""" )

            if i_append_new_line then
                write_new_line
            .
        .

        write_HTML_block_tag_end

            write_HTML_tag_end ( write_indent = yes, i_HTML_tag_name, append_new_line = yes )
        .

        write_HTML_inline_tag_end

            write_HTML_tag_end ( write_indent = no, i_HTML_tag_name, append_new_line = no )
        .

        // HTML attributes

        write_HTML_attribute

            write ( """ {{i_name}}="{{escape_HTML(i_value)}}"""" )
        .

        write_HTML_class_attribute

            if not a_config.omit_CSS then
                write ( """ class="{{i_CSS_class_name}}"""" )
            .
        .

        write_HTML_attributes

            repeat for each name, value in attributes
                write_HTML_attribute ( name, value )
            .
        .

        write_HTML_attributes_for_node

            variable has_explicit_class_attribute = no

            if i_node.HTML_attributes as HTML_attributes is not null then
                repeat for each key, value in HTML_attributes

                    const name = key.substring_from ( se_PML_attribute_ids.HTML_start_size + 1 )
                    write ( """ {{name}}=""" )

                    if name =v "class" then
                        // the standard PML class and an explicitly defined class attribute must be merged
                        has_explicit_class_attribute = yes

                        const class_name = mutable_string.create
                        if i_CSS_class_name is not null then
                            class_name.append ( i_CSS_class_name )
                        .
                        if value is not null then
                            if not class_name.is_empty then
                                class_name.append ( " " )
                            .
                            class_name.append ( value )
                        .
                        if not class_name.is_empty then
                            write ( """"{{class_name.to_string}}"""" )
                        else
                            write ( '''""''' )
                        .
                    else
                        if value is not null then
                            // write ( """"{{escape_HTML ( value )}}"""" )
                            write ( """"{{value}}"""" )
                        else
                            write ( '''""''' )
                        .
                    .
                .
            .

            if not has_explicit_class_attribute then
                if i_CSS_class_name is not null then
                    write_HTML_class_attribute ( i_CSS_class_name )
                .
            .
        .


        // nodes

        write_nodes

            if nodes is null then
                return
            .

            if i_increase_indent then
                co_increase_indent
            .

            repeat for each node in nodes
                const formal_node = se_PML_formal_node_registry.get_by_any_tag_or_null ( node.tag ) \
                    on_null: throw "No formal node found"
                // formal_node.HTML_writer.write ( node, context = this, config )
                const writer PML_node_HTML_writer<PML_node> = formal_node.HTML_writer type_check:no
                writer.write ( node, context = this, config = a_config )
            .

            if i_increase_indent then
                decrease_indent
            .
        .

        write_node_id

            if i_node.node_id as id is not null then
                write ( """ id="{{escape_HTML ( id )}}"""" )
            .
        .

        write_node_caption

            if i_caption is null then
                return
            .

            write_indent_and_string ( "<p" )
            write_HTML_class_attribute ( "pml-caption" )
            write_line ( """>{{escape_HTML(i_caption)}}</p>""" )
        .


        // block_node

        write_block_node_start

            write_indent_and_string ( """<{{i_HTML_tag_name}}""" )
            write_node_id ( i_node )

            const non_null non_null = i_node
            case type of non_null
                when PML_has_HTML_attributes
                    write_HTML_attributes_for_node ( node = non_null, i_CSS_class_name )
                otherwise
                    write_HTML_class_attribute ( i_CSS_class_name )
            .

            write ( ">" )

            if i_append_new_line then
                write_new_line
            .
        .

        write_block_node_with_child_nodes

            write_block_node_start ( i_node, i_HTML_tag_name, i_CSS_class_name, append_new_line = i_append_new_line_for_tag )

            write_nodes ( nodes = i_node.child_nodes, increase_indent = i_append_new_line_for_tag )

            if i_append_new_line_for_tag then
                write_indent
            .

            write_HTML_tag_end ( write_indent = no, i_HTML_tag_name, append_new_line = yes )
        .

        write_block_node_with_raw_text_content

            write_block_node_start ( i_node, i_HTML_tag_name, i_CSS_class_name, append_new_line = no )

            write_escaped_HTML ( i_node.text )

            write_HTML_tag_end ( write_indent = no, i_HTML_tag_name, append_new_line = yes )
        .


        // inline_node

        write_inline_node_with_child_nodes

            write_HTML_inline_tag_start ( i_HTML_tag_name, i_CSS_class_name )
            write_nodes ( nodes = i_node.child_nodes, increase_indent = no )
            write_HTML_inline_tag_end ( i_HTML_tag_name )
        .
    .

    creator create kind:in_all
.
