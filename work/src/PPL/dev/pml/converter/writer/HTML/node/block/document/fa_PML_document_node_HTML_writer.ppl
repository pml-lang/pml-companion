// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

factory PML_document_node_HTML_writer type:PML_node_HTML_writer<PML_document_node>

    function write

        context.write_indent_and_string ( "<article" )
        context.write_HTML_attributes_for_node ( node, CSS_class_name = "pml-doc-text" )
        context.write_line ( ">" )
        context.increase_indent

///
        context.write_HTML_block_tag_start ( HTML_tag_name = "div", CSS_class_name = "pml-doc-title-wrapper" )
        context.increase_indent

//        write_title ( title = i_node.title, context )

        if i_node.authors as authors is not null then
            write_authors ( authors, context )
        .

        if i_node.publication_date #r null or i_node.publication_time #r null then
            write_publication_date_time ( date = i_node.publication_date, time = i_node.publication_time, context )
        .

        context.decrease_indent
        context.write_HTML_block_tag_end ( "div" )
.///

        if i_config.TOC_position =r PML_TOC_position.top then
            se_PML_HTML_TOC.write_TOC ( document_node = i_node, context, max_level = 10 )
        .

        context.write_nodes ( nodes = i_node.child_nodes, increase_indent = no )

        context.decrease_indent
        context.write_HTML_block_tag_end ( "article" )
    .

    functions access:private

///
        function write_title ( title string, context PML_HTML_writer_context )

            context.write_indent
            context.write_HTML_inline_tag_start ( HTML_tag_name = "h1", CSS_class_name = "pml-doc-title" )
            context.write_escaped_HTML ( title )
            context.write_HTML_inline_tag_end ( "h1" )
            context.write_new_line
        .

        function write_authors ( authors list<string>, context PML_HTML_writer_context )

            context.write_indent
            context.write_HTML_inline_tag_start ( HTML_tag_name = "div", CSS_class_name = "pml-doc-authors" )
            repeat for each author in i_authors is_first:is_first is_last:is_last
                if is_last and authors.size ># 1 then
                    context.write ( " and " )
                else if not is_first then
                    context.write ( ", " )
                .
                context.write_escaped_HTML ( author )
            .
            context.write_HTML_inline_tag_end ( "div" )
            context.write_new_line
        .

        function write_publication_date_time
            in date local_date or null
            in time local_time or null
            in context PML_HTML_writer_context

            if date =r null and time =r null then
                return
            .

            context.write_indent
            context.write ( "<time" )
            context.write_HTML_class_attribute ( "pml-doc-date-time" )
            context.write ( ''' datetime="''' )
            write_date_time ( date, time, context, time_format = "HH:mm:ss" )
            context.write ( '''">''' )
            write_date_time ( date, time, context, time_format = "HH:mm" )

            context.write_HTML_inline_tag_end ( "time" )
            context.write_new_line
        .

        function write_date_time
            in date local_date or null
            in time local_time or null
            in context PML_HTML_writer_context
            in time_format string

            if date is not null then
                context.write ( date.format ( "YYYY-MM-dd" ) )
            .

            if time is not null then
                if date is not null then
                    context.write ( " " )
                .
                context.write ( time.format ( i_time_format ) )
            .
        .
.///
    .

    creator create kind:in_all
.
