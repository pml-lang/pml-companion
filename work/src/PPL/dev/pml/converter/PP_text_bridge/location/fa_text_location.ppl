// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

factory text_location

    java_header
        import dev.pp.text.location.TextLocation;

        import org.ppl.core.basics.scalar.number.integer.integer_64_bits.positive_64.fa_pos_64;

        import dev.pml.converter.PP_text_bridge.resource.fa_text_resource_Java_wrapper;
    end java_header

	java
		// private TextLocation textLocation;
		protected TextLocation textLocation;

		public TextLocation getJavaTextLocation() {

            if ( textLocation == null ) {

                textLocation = new TextLocation (
                    a_resource == null ? null : a_resource.getJavaTextResource(),
                    a_line_number.getJavaLong(),
                    a_column_number.getJavaLong(),
                    a_parent_location == null ? null : a_parent_location.getJavaTextLocation() );
            }

            return textLocation;
        }

        public static ty_text_location createFromJava ( TextLocation textLocation ) {
            // se_java_utilities.checkInputNotNull ( textLocation, "textLocation" );

            fa_text_location this_ = (fa_text_location) fa_text_location.create (
                fa_text_resource_Java_wrapper.createFromJavaNullable ( textLocation.getResource() ),
                new fa_pos_64 ( textLocation.getLineNumber() ),
                new fa_pos_64 ( textLocation.getColumnNumber() ),
                fa_text_location.createFromJavaNullable ( textLocation.getParentLocation() ) );

            this_.textLocation = textLocation;

            return this_;
        }

        public static ty_text_location createFromJavaNullable ( TextLocation textLocation ) {

            if ( textLocation == null ) return null;

            return createFromJava ( textLocation );
        }
 	end java


    functions native:yes

        // TD error
        try_get_text_line
            java
                try {
                    return fa_string.createOrNull ( getJavaTextLocation().getTextLine() );
                } catch ( Exception e ) {
                    return null;
                }
            end java
        .

        // TD error
        try_get_text_line_with_inline_marker
            java
                try {
                    return fa_string.createOrNull (
                        getJavaTextLocation().getTextLineWithInlineMarker ( i_marker.getJavaString() ) );
                } catch ( Exception e ) {
                    return null;
                }
            end java
        .

        to_string
            java
                return new fa_string ( getJavaTextLocation().toString() );
            end java
        .

        to_log_string
            java
                return new fa_string ( getJavaTextLocation().toLogString() );
            end java
        .
    .


    creator create kind:in_all


    tests

        const location_1 = text_location.create (
            resource = null, line_number = 1L, column_number = 11L, parent_location = null )
        const location_2 = text_location.create (
            resource = null, line_number = 2L, column_number = 22L, parent_location = location_1 )
        location_2.to_string // avoid "not used" error

        variable location_2_j text_location
        java
            TextLocation location2J = c_location_2.getJavaTextLocation();
            v_location_2_j = fa_text_location.createFromJava ( location2J );
        end java

        assert location_2_j is not null
        verify location_2_j.line_number =v 2L
        verify location_2_j.column_number =v 22L
        verify location_2_j.parent_location is not null

        const location_1_j = location_2_j.parent_location
        verify location_1_j is not null
        verify location_1_j.line_number =v 1L
        verify location_1_j.column_number =v 11L
        verify location_1_j.parent_location is null

        write_new_line
        write_line ( location_2_j.to_string )
        write_new_line
        write_line ( location_2_j.to_log_string )
    .
.
