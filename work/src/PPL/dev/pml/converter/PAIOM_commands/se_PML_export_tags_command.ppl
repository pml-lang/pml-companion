// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service PML_export_tags_command

    att output_file_parameter formal_parameter<absolute_or_relative_file_path> =
        se_formal_parameter_creator.absolute_or_relative_file_path (
            ids = [# "output_file", "file" ]
            default_value_supplier = { relative_file_path.create ( "pml_tags.json" ) }
            validator = null,
            title = "JSON Output File Path",
            description = '''The absolute or relative path of the JSON file created.
If the path is relative, it is relative to the current working directory.
The default file created is 'pml_tags.json' in the current working directory.
If the file exists already it will be overwritten.''',
            examples = "--file tags.json" )

    att command explicit_paiom_command<file> = explicit_paiom_command<file>.create (
        ids = [# PAIOM_command_id.create ( "export_tags" ) ]
        formal_input_parameters = any_type_formal_parameters_builder.create
            .add_parameter ( a_output_file_parameter )
            .make_immutable
        executor = { input => se_PML_export_tags_command.execute ( input ) },
        documentation = simple_documentation.create (
            title = "Export PML Tags And Attributes to a JSON File"
            description = '''This command creates a JSON file containing structured data about PML tags and attributes.
The JSON file can be used by editor plugins and tools that depend on PML tags and attributes.'''
            examples = "pmlc export_tags" ) )


    functions access:private

        function execute ( input any_type_parameters or null ) -> file

            assert i_input is not null

            const output_file_path = i_input.get_absolute_or_relative_file_path ( a_output_file_parameter.standard_id )
            const output_file = se_absolute_or_relative_file_path.to_file ( path = output_file_path )

            const text_file_writer = text_file_writer.create_for_new_or_existing_file (
                file = output_file
                append_mode = no ) on_error:throw_error
            const JSON_writer = fa_PDL_writer.create ( writer = text_file_writer )

            JSON_writer.write ( """{
    "pml_tags":{
        "pml_version":"{{se_PML_to_HTML_Converter.version}}",
        "pml_release_date":"{{se_PML_to_HTML_Converter.version_date.to_string}}",
        "tags":[
""" ).increase_indent.increase_indent.increase_indent

        // "date_time_created":"{{date_time.now.format ( "YYYY-MM-dd'T'HH:mmZ" )}}",

            repeat for each formal_node in se_PML_formal_node_registry.sorted_formal_nodes is_last:is_last_node
                write_formal_node ( writer = JSON_writer, formal_node, is_last_node )
            .

            JSON_writer.write_line ( '''        ]
    }
}''' )

            JSON_writer.close

            OS.out.write_line ( """File {{output_file.to_string}} has been created.""" )

            return output_file
        .

        function write_formal_node ( writer PDL_writer, formal_node PML_formal_node<*>, is_last_node yes_no )

            writer.write_indent.write_map_start.write_new_line.increase_indent

            write_string_member ( writer, name = "id", value = formal_node.standard_tag, is_last = no )

            variable type string
            variable is_inline_type yes_no
            case type of formal_node
                when PML_formal_block_node<*>
                    type = "block"
                    is_inline_type = no
                when PML_formal_inline_node<*>
                    type = "inline"
                    is_inline_type = yes
            .
            write_string_member ( writer, name = "type", value = type, is_last = no )

            const documentation = formal_node.documentation
            write_string_member ( writer, name = "title", value = documentation.title, is_last = no )
            write_string_member ( writer, name = "description", value = documentation.description, is_last = no )
            write_string_member ( writer, name = "examples", value = documentation.examples, is_last = no )

            write_attributes ( writer, formal_node )

            write_string_member ( writer, name = "default_attribute_id",
                value = formal_node.default_attribute_id?.value, is_last = no )

            write_yes_no_member ( writer, name = "HTML_attributes_allowed",
                value = formal_node.HTML_attributes_allowed, is_last = no )

            write_yes_no_member ( writer, name = "is_inline_type",
                value = is_inline_type, is_last = no )

            variable is_raw_text_block yes_no
            variable closing_tag = PML_default_values.node_end_symbol.to_string
            case type of formal_node
                when PML_formal_block_node_with_raw_text_content<*>
                    is_raw_text_block = yes
                    closing_tag = formal_node.standard_tag & closing_tag
                otherwise
                    is_raw_text_block = no
            .
            write_yes_no_member ( writer, name = "is_raw_text_block", value = is_raw_text_block, is_last = no )

            write_yes_no_member ( writer,
                name = "child_nodes_allowed",
                value = se_formal_node.child_nodes_allowed ( formal_node ), is_last = no )

            write_string_member ( writer, name = "opening_tag",
                value = PML_default_values.node_start_symbol.to_string & formal_node.standard_tag,
                is_last = no )

            write_string_member ( writer, name = "closing_tag", value = closing_tag, is_last = no )

            write_string_member ( writer, name = "latest_doc_url",
                value = """https://www.pml-lang.dev/docs/reference_manual/index.html#node_{{formal_node.standard_tag}}""",
                is_last = yes )

            writer.decrease_indent.write_indent
            if not is_last_node then
                writer.write_line ( "}," )
            else
                writer.write_line ( "}" )
            .
        .

        function write_attributes ( writer PDL_writer, formal_node PML_formal_node<*> )

            const attributes = formal_node.attributes
            if attributes is null then
                writer.write_indent.write_JSON_object_null_member ( "attributes" ).write_separator.write_new_line
                return
            .

            writer.write_indent.write_quoted_string ( "attributes" ).write_assignment.write_list_start.write_new_line.increase_indent

            const sorted_list list<formal_parameter<*>> = attributes.sorted_list type_check:no
            repeat for each attribute in sorted_list is_last:is_last_attribute
                write_attribute ( writer, attribute, is_last_attribute )
            .

            writer.decrease_indent.write_indent.write_list_end.write_separator.write_new_line
        .

        function write_attribute ( writer PDL_writer, attribute formal_parameter<*>, is_last_attribute yes_no )

            writer.write_indent.write_map_start.write_new_line.increase_indent

            write_string_member ( writer, name = "id", value = attribute.standard_id.value, is_last = no )
            write_string_member ( writer, name = "type", value = attribute.value_type.to_string, is_last = no )

            write_yes_no_member ( writer, name = "required", value = attribute.is_required, is_last = no )

            if attribute.default_value_supplier?.get as default_value is not null then
                write_string_member ( writer, name = "default_value", value = default_value.to_string, is_last = no )
            else
                write_string_member ( writer, name = "default_value", value = null, is_last = no )
            .

            const documentation = attribute.documentation
            assert documentation is not null
            write_string_member ( writer, name = "title", value = documentation.title, is_last = no )
            write_string_member ( writer, name = "description", value = documentation.description, is_last = no )
            write_string_member ( writer, name = "examples", value = documentation.examples, is_last = yes )


            writer.decrease_indent.write_indent.write_map_end
            if not i_is_last_attribute
                writer.write_separator
            .
            writer.write_new_line
        .

        function write_string_member ( writer PDL_writer, name string, value string or null, is_last yes_no )

            writer.write_indent.write_JSON_object_string_member ( i_name, i_value )

            if not is_last then
                writer.write_separator
            .

            writer.write_new_line
        .

        function write_yes_no_member ( writer PDL_writer, name string, value yes_no or null, is_last yes_no )

            writer.write_indent.write_JSON_object_yes_no_member ( i_name, i_value )

            if not is_last then
                writer.write_separator
            .

            writer.write_new_line
        .
    .
.
