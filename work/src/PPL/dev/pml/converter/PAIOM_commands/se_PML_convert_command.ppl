// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service PML_convert_command

    att input_file_parameter formal_parameter<absolute_or_relative_file_path> = \
        formal_parameter<absolute_or_relative_file_path>.create (
            ids = [# parameter_id.create ( "input_file" ), parameter_id.create ( "f" ) ]
            default_value_supplier = default_input_file_supplier
            value_parser = fa_absolute_or_relative_file_path_parser.create
            validator = { path => se_absolute_or_relative_file_path.check_is_existing_file ( path ) }
            documentation = simple_documentation.create (
                title = "PML file to convert",
                description = '''Absolute or relative path of the PML file to convert to HTML.
If a relative path is specified then it is relative to the current working directory.
The default value is defined in the following order:
1. If file index.pml exists in the current working directory, then this is the default file.
2. If a single .pml file exists in the current working directory, then this is the default file.
3. There is no default value.'''
                examples = "--input_file input/index.pml" ) )

    att resources_directory_parameter formal_parameter<absolute_or_relative_directory_path or null> = \
        formal_parameter<absolute_or_relative_directory_path or null>.create (
            ids = [# parameter_id.create ( "resources_directory" ), parameter_id.create ( "rd" ) ]
            default_value_supplier = { se_PML_default_values.relative_resources_directory_path }
            value_parser = fa_absolute_or_relative_directory_path_parser.create
            validator = { path => se_PML_to_HTML_checker.check_is_existing_directory_or_null ( path ) }
            documentation = simple_documentation.create (
                title = "Directory of resources"
                description = """Optional directory of resources (e.g. media files) that will be copied into the output directory.
If a relative path is specified then it is relative to the current working directory.
By default, sub-directory '{{se_PML_default_values.resources_directory_name}}' of the current working directory is used, but only if such a directory exists."""
                examples = "--resources_directory input/media" ) )

    att user_defined_nodes_directory_parameter formal_parameter<list<absolute_or_relative_directory_path> or null> = \
        formal_parameter<list<absolute_or_relative_directory_path> or null>.create (
            ids = [# parameter_id.create ( "user_defined_nodes_directories" ), parameter_id.create ( "udnd" ) ]
            default_value_supplier = { se_PML_default_values.existing_user_defined_nodes_directory_paths }
            value_parser = fa_absolute_or_relative_directory_paths_parser.create
            validator = { paths => se_PML_to_HTML_checker.check_is_existing_directories_or_null ( paths ) }
            documentation = simple_documentation.create (
                title = "Directories of user defined nodes"
                description = """Optional list of directories with files that define user defined nodes.
On Windows, the list of directories is separated by a ';'.
On Linux/Unix, the list of directories is separated by a ':'.
If a relative directory path is specified then it is relative to the current working directory.
Files in sub-directories of the specified directories are included.
Only files with extension 'pdml' (e.g. my_node.pdml) are considered. Other files are ignored.
Files whose name starts with '---' (e.g. ---test.pdml) are ignored.
By default, sub-directory '{{se_PML_default_values.user_defined_nodes_directory_path}}' of the current working directory is used, but only if such a directory exists."""
                examples = "--user_defined_nodes_directories config/nodes;../../shared/nodes" ) )

    att output_directory_parameter formal_parameter<absolute_or_relative_directory_path> = \
        formal_parameter<absolute_or_relative_directory_path>.create (
            ids = [# parameter_id.create ( "output_directory" ), parameter_id.create ( "od" ) ]
            default_value_supplier = { se_PML_default_values.relative_output_directory_path }
            value_parser = fa_absolute_or_relative_directory_path_parser.create
            documentation = simple_documentation.create (
                title = "Directory of HTML document"
                description = """Output directory in which the HTML document is created.
If a relative path is specified then it is relative to the current working directory.
By default directory '{{se_PML_default_values.output_directory_name}}' in the current working directory is used.
If the output directory doesn't exist it will be created."""
                examples = "--output_directory output/HTML" ) )

    att HTML_header_file_parameter formal_parameter<absolute_or_relative_file_path or null> = \
        formal_parameter<absolute_or_relative_file_path or null>.create (
            ids = [# parameter_id.create ( "HTML_header" ),
                parameter_id.create ( "html_header" ),
                parameter_id.create ( "header" ) ]
            default_value_supplier = { se_PML_default_values.HTML_header_file.path }
            value_parser = fa_absolute_or_relative_file_path_parser.create
            validator = { path => se_PML_to_HTML_checker.check_is_existing_file_or_null ( path ) }
            documentation = simple_documentation.create (
                title = "HTML header file",
                description = '''Absolute or relative path of a file that contains the HTML header code.
If a relative path is specified then it is relative to the current working directory.
If the value is empty then no header is written to the HTML output file.'''
                examples = "--HTML_header headers/my_HTML_header.txt" ) )

    att HTML_footer_file_parameter formal_parameter<absolute_or_relative_file_path or null> = \
        formal_parameter<absolute_or_relative_file_path or null>.create (
            ids = [# parameter_id.create ( "HTML_footer" ),
                parameter_id.create ( "html_footer" ),
                parameter_id.create ( "footer" ) ]
            default_value_supplier = { se_PML_default_values.HTML_footer_file.path }
            value_parser = fa_absolute_or_relative_file_path_parser.create
            validator = { path => se_PML_to_HTML_checker.check_is_existing_file_or_null ( path ) }
            documentation = simple_documentation.create (
                title = "HTML footer file",
                description = '''Absolute or relative path of a file that contains the HTML footer code.
If a relative path is specified then it is relative to the current working directory.
If the value is empty then no footer is written to the HTML output file.'''
                examples = "--HTML_footer headers/my_HTML_footer.txt" ) )

///
    att tag_start_stop_symbols_parameter formal_parameter<string> = se_formal_parameter_creator.string (
        ids = [# "tag_start_stop_symbols", "tss" ]
        default_value_supplier = { ty_PML_to_HTML_config.tag_start_stop_symbols.default }
        validator = { value ->
            if i_value =v "[]" or i_value =v "{}" then
                return null
            else
                return invalid_string_data_error.create (
                    info = """'{{i_value}}' is invalid. Only '[]' and '{}' are currently supported."""
                    data = i_value )
            .
        },
        title = "Tag Start Stop Symbols",
        description = "The pair of characters that are used as symbols to start and stop a tag (e.g. '[]' or '{}').",
        examples = '''--tag_start_stop_symbols "{}"''' )
.///

    att omit_CSS_parameter formal_parameter<yes_no> = \
        formal_parameter<yes_no>.create (
            ids = [# parameter_id.create ( "omit_CSS" ), parameter_id.create ( "omit_css" ) ]
            default_value_supplier =  { se_PML_default_values.omit_CSS }
            value_parser = se_yes_no_parser.default_parser
            validator = null
            documentation = simple_documentation.create (
                title = "Omit CSS",
                description = '''If this parameter is set to 'yes' then:
- no CSS classes are used in the resulting HTML file
- no CSS files are copied to the output directory
By default this parameter is set to 'no'.'''
                examples = "--omit_CSS yes" ) )

    att open_file_cmd formal_parameter<string or null> default:se_formal_parameter_creator.string_or_null (
        ids = [# "open_file_cmd", "ofc" ]
        default_value_supplier = { null }
        title = "Open File OS Command"
        description = '''This parameter specifies an OS command template to open an editor for the first file in which an error was detected.
The following placeholders can be used:
[[file]]
    the full path of the file in which the error was detected
[[line]]
    the line number of the error (first line = 1)
[[column]]
    the column number of the error (first column = 1)

Note:
Be careful to correctly quote file paths that include spaces.
Different OS environments have different rules. Please consult your OS documentation for further information.
'''
        examples = '''// open VSCode in Windows:
--open_file_cmd "cmd.exe /c code --goto \"[[file]]:[[line]]:[[column]]\""
// alternative (replace {username} with the name on your machine):
--open_file_cmd "\"C:\Users\{username}\AppData\Local\Programs\Microsoft VS Code\Code.exe\" --goto \"[[file]]:[[line]]:[[column]]\""

// open Sublime Text in Windows (subl must be on the OS path)
--open_file_cmd "cmd.exe /c subl \"[[file]]:[[line]]:[[column]]\""
''' )

    att formal_input_parameters formal_parameters<*> = any_type_formal_parameters_builder.create
        .add_parameter ( a_input_file_parameter )
        .add_parameter ( a_resources_directory_parameter )
        .add_parameter ( a_output_directory_parameter )
        .add_parameter ( a_user_defined_nodes_directory_parameter )
        .add_parameter ( a_HTML_header_file_parameter )
        .add_parameter ( a_HTML_footer_file_parameter )
        .add_parameter ( a_omit_CSS_parameter )
        .add_parameter ( a_open_file_cmd )
        .make_immutable

    att command explicit_paiom_command<file or anticipated_error> = \
        explicit_paiom_command<file or anticipated_error>.create (

        ids = [# PAIOM_command_id.create ( "convert" ) ]
        formal_input_parameters = a_formal_input_parameters
        executor = { input => se_PML_convert_command.execute(input) },
        documentation = simple_documentation.create (
            title = "PML to HTML Conversion"
            description = "Convert a PML document into a HTML document."
            examples = '''pmlc convert -f input/index.pml
pmlc convert --input_file input/index.pml --output_directory output/HTML --resources_directory images''' ) )

    function execute ( input any_type_parameters or null ) -> file or anticipated_error

        assert i_input is not null

        const PML_input_path = i_input.get_value<absolute_or_relative_file_path> ( a_input_file_parameter.standard_id )

        const resources_directory_path = \
            i_input.get_value<absolute_or_relative_directory_path or null> ( a_resources_directory_parameter.standard_id )
        const output_directory_path = \
            i_input.get_value<absolute_or_relative_directory_path> ( a_output_directory_parameter.standard_id )
        const user_defined_nodes_directory_paths = \
            i_input.get_value<list<absolute_or_relative_directory_path> or null> ( a_user_defined_nodes_directory_parameter.standard_id )

        const HTML_header_file_path = \
            i_input.get_value<absolute_or_relative_file_path or null> ( a_HTML_header_file_parameter.standard_id )
        const HTML_footer_file_path = \
            i_input.get_value<absolute_or_relative_file_path or null> ( a_HTML_footer_file_parameter.standard_id )

        const omit_CSS = i_input.get_value<yes_no> ( a_omit_CSS_parameter.standard_id )

        const open_file_cmd = i_input.get_value<string or null> ( a_open_file_cmd.standard_id )

        const config = PML_to_HTML_config.create_for_paths (
            root_directory_for_relative_path = se_OS_directories.current_working_directory_path
            PML_input_path,
            resources_directory_path,
            user_defined_nodes_directory_paths
            output_directory_path,
            HTML_header_file_path,
            HTML_footer_file_path,
            omit_CSS,
            open_file_cmd )

        return se_PML_to_HTML_Converter.try_convert ( config )
    .

    functions access:private

        function default_input_file_supplier -> object_supplier<absolute_or_relative_file_path> or null

            const path = se_PML_default_values.relative_input_file_path on_null: return null

            return { path }
        .
    .
.
