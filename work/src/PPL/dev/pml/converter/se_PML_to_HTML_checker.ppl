// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service PML_to_HTML_checker

    function check_parameters ( resources_directory directory or null, output_directory directory ) -> runtime_error or null

        if i_resources_directory is not null then
            if i_resources_directory.path.is_equal_to_or_ancestor_of ( i_output_directory.path ) then
                if i_output_directory =v i_resources_directory then
                    return invalid_data_error<directory>.create (
                        info = """Resources directory '{{i_resources_directory.to_string}}' cannot be the same as the output directory."""
                        data = i_resources_directory )
                else
                    return invalid_data_error<directory>.create (
                        info = """Resources directory '{{i_resources_directory.to_string}}' cannot be a parent directory of the output directory '{{i_output_directory.to_string}}'."""
                        data = i_resources_directory )
                .
            .
        .

        return null
    .


    // check_existing

    function check_is_existing_file_or_null ( path absolute_or_relative_file_path or null ) \
        -> file_inexistent_error or null

        if i_path is null then
            return null
        else
            return se_absolute_or_relative_file_path.check_is_existing_file ( i_path )
        .
    .

    function check_is_existing_directory_or_null ( path absolute_or_relative_directory_path or null ) \
        -> directory_inexistent_error or null

        if i_path is null then
            return null
        else
            return se_absolute_or_relative_directory_path.check_is_existing_directory ( i_path )
        .
    .

    function check_is_existing_directories_or_null ( paths list<absolute_or_relative_directory_path> or null ) \
        -> directory_inexistent_error or null

        if i_paths is null then
            return null
        .

        repeat for each path in i_paths
            check_is_existing_directory_or_null ( path ) on_error:return_error
        .
        return null
    .

    // try_get_existing

///
    function try_get_existing_file_or_null ( path absolute_or_relative_file_path or null ) \
        -> file or null or file_inexistent_error

        if i_path is null then
            return null
        .

        return se_absolute_or_relative_file_path.try_to_existing_file ( i_path )
    .

    function try_to_existing_directory_or_null ( path absolute_or_relative_directory_path or null ) \
        -> directory or null or runtime_error

        if i_path is null then
            return null
        .

        return se_absolute_or_relative_directory_path.try_to_existing_directory ( i_path )
    .
.///
.
